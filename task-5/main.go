package main

import (
	"fmt"
	"unicode"
	"unicode/utf8"
)

// –ó–∞–¥–∞—á–∞ 5

// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é CountRunes(s string) int, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–Ω –≤ —Å—Ç—Ä–æ–∫–µ.
// –ü—Ä–æ–≤–µ—Ä—å –Ω–∞ —Å—Ç—Ä–æ–∫–∞—Ö: "Go", "–ü—Ä–∏–≤–µ—Ç", "‰Ω†Â•Ω", "üôÇ".

func CountRunes(s string) int {
	return utf8.RuneCountInString(s)
}

// –ó–∞–¥–∞—á–∞ 6

// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é OnlyLetters(s string) string, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤.
// –ò—Å–ø–æ–ª—å–∑—É–π for _, r := range s –∏ unicode.IsLetter(r).

func OnlyLetters(s string) string {
	slice := []rune{}

	for _, r := range s {

		if unicode.IsLetter(r) {
			slice = append(slice, r)
		}
	}
	return string(slice)
}

func main() {

	fmt.Println(OnlyLetters("asan3"))

	// Go := "Go"
	// Hello := "–ü—Ä–∏–≤–µ—Ç"
	// Japan := "‰Ω†Â•Ω"
	// Smile := "üôÇ"

	// fmt.Println(CountRunes(Go))
	// fmt.Println(CountRunes(Hello))
	// fmt.Println(CountRunes(Japan))
	// fmt.Println(CountRunes(Smile))

}
