package main

import (
	"fmt"
	"strings"
	"unicode"
)

// –ó–∞–¥–∞—á–∞ 9. –û—á–∏—Å—Ç–∫–∞ –ø–∞—Ä–æ–ª—è

// –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø—Ä–æ–±–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (–∏—Å–ø–æ–ª—å–∑—É–π unicode.IsSpace).
// –ó–∞–ø—Ä–µ—Ç–∏—Ç—å –Ω–µ–ø–µ—á–∞—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã. (–∏—Å–ø–æ–ª—å–∑—É–π unicode.IsControl().
// –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä.
// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä—É–Ω—ã –∫–∞–∫ –µ—Å—Ç—å (–≤ —Ç.—á. —ç–º–æ–¥–∑–∏, –∫–∏—Ä–∏–ª–ª–∏—Ü—É, –∑–Ω–∞–∫–∏).

func CleanPassword(s string) string {
	slice := []rune{}

	for _, r := range s {

		if unicode.IsSpace(r) || unicode.IsControl(r) {
		} else {
			slice = append(slice, r)
		}
	}
	return strings.ToUpper(string(slice))
}

func main() {
	fmt.Println(CleanPassword("tu \nt u küôÇ"))
}
